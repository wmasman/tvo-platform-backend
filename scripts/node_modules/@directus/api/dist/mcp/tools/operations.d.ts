import { z } from 'zod';
export declare const OperationsValidationSchema: z.ZodDiscriminatedUnion<[z.ZodObject<{
    action: z.ZodLiteral<"create">;
    data: z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNull]>>;
        key: z.ZodOptional<z.ZodString>;
        type: z.ZodOptional<z.ZodString>;
        position_x: z.ZodOptional<z.ZodNumber>;
        position_y: z.ZodOptional<z.ZodNumber>;
        options: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        resolve: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNull]>>;
        reject: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNull]>>;
        flow: z.ZodOptional<z.ZodString>;
        date_created: z.ZodOptional<z.ZodString>;
        user_created: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>;
}, z.core.$strict>, z.ZodObject<{
    action: z.ZodLiteral<"read">;
    query: z.ZodOptional<z.ZodObject<{
        fields: z.ZodOptional<z.ZodArray<z.ZodString>>;
        sort: z.ZodOptional<z.ZodArray<z.ZodString>>;
        filter: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        limit: z.ZodOptional<z.ZodNumber>;
        offset: z.ZodOptional<z.ZodNumber>;
        page: z.ZodOptional<z.ZodNumber>;
        search: z.ZodOptional<z.ZodString>;
        deep: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        alias: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        aggregate: z.ZodOptional<z.ZodObject<{
            count: z.ZodArray<z.ZodString>;
            sum: z.ZodArray<z.ZodString>;
            avg: z.ZodArray<z.ZodString>;
            min: z.ZodArray<z.ZodString>;
            max: z.ZodArray<z.ZodString>;
        }, z.core.$strip>>;
        backlink: z.ZodOptional<z.ZodBoolean>;
        version: z.ZodOptional<z.ZodString>;
        versionRaw: z.ZodOptional<z.ZodBoolean>;
        export: z.ZodOptional<z.ZodString>;
        group: z.ZodOptional<z.ZodArray<z.ZodString>>;
    }, z.core.$strip>>;
}, z.core.$strict>, z.ZodObject<{
    action: z.ZodLiteral<"update">;
    data: z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNull]>>;
        key: z.ZodOptional<z.ZodString>;
        type: z.ZodOptional<z.ZodString>;
        position_x: z.ZodOptional<z.ZodNumber>;
        position_y: z.ZodOptional<z.ZodNumber>;
        options: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        resolve: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNull]>>;
        reject: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNull]>>;
        flow: z.ZodOptional<z.ZodString>;
        date_created: z.ZodOptional<z.ZodString>;
        user_created: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>;
    key: z.ZodString;
}, z.core.$strict>, z.ZodObject<{
    action: z.ZodLiteral<"delete">;
    key: z.ZodString;
}, z.core.$strict>]>;
export declare const OperationsInputSchema: z.ZodObject<{
    action: z.ZodEnum<{
        delete: "delete";
        update: "update";
        create: "create";
        read: "read";
    }>;
    query: z.ZodOptional<z.ZodObject<{
        fields: z.ZodOptional<z.ZodArray<z.ZodString>>;
        sort: z.ZodOptional<z.ZodArray<z.ZodString>>;
        filter: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        limit: z.ZodOptional<z.ZodNumber>;
        offset: z.ZodOptional<z.ZodNumber>;
        page: z.ZodOptional<z.ZodNumber>;
        search: z.ZodOptional<z.ZodString>;
        deep: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        alias: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        aggregate: z.ZodOptional<z.ZodObject<{
            count: z.ZodArray<z.ZodString>;
            sum: z.ZodArray<z.ZodString>;
            avg: z.ZodArray<z.ZodString>;
            min: z.ZodArray<z.ZodString>;
            max: z.ZodArray<z.ZodString>;
        }, z.core.$strip>>;
        backlink: z.ZodOptional<z.ZodBoolean>;
        version: z.ZodOptional<z.ZodString>;
        versionRaw: z.ZodOptional<z.ZodBoolean>;
        export: z.ZodOptional<z.ZodString>;
        group: z.ZodOptional<z.ZodArray<z.ZodString>>;
    }, z.core.$strip>>;
    data: z.ZodOptional<z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNull]>>;
        key: z.ZodOptional<z.ZodString>;
        type: z.ZodOptional<z.ZodString>;
        position_x: z.ZodOptional<z.ZodNumber>;
        position_y: z.ZodOptional<z.ZodNumber>;
        options: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        resolve: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNull]>>;
        reject: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNull]>>;
        flow: z.ZodOptional<z.ZodString>;
        date_created: z.ZodOptional<z.ZodString>;
        user_created: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>>;
    key: z.ZodOptional<z.ZodString>;
}, z.core.$strip>;
export declare const operations: import("../types.js").ToolConfig<{
    action: "create";
    data: {
        id?: string | undefined;
        name?: string | null | undefined;
        key?: string | undefined;
        type?: string | undefined;
        position_x?: number | undefined;
        position_y?: number | undefined;
        options?: Record<string, any> | undefined;
        resolve?: string | null | undefined;
        reject?: string | null | undefined;
        flow?: string | undefined;
        date_created?: string | undefined;
        user_created?: string | undefined;
    };
} | {
    action: "read";
    query?: {
        fields?: string[] | undefined;
        sort?: string[] | undefined;
        filter?: Record<string, any> | undefined;
        limit?: number | undefined;
        offset?: number | undefined;
        page?: number | undefined;
        search?: string | undefined;
        deep?: Record<string, any> | undefined;
        alias?: Record<string, string> | undefined;
        aggregate?: {
            count: string[];
            sum: string[];
            avg: string[];
            min: string[];
            max: string[];
        } | undefined;
        backlink?: boolean | undefined;
        version?: string | undefined;
        versionRaw?: boolean | undefined;
        export?: string | undefined;
        group?: string[] | undefined;
    } | undefined;
} | {
    action: "update";
    data: {
        id?: string | undefined;
        name?: string | null | undefined;
        key?: string | undefined;
        type?: string | undefined;
        position_x?: number | undefined;
        position_y?: number | undefined;
        options?: Record<string, any> | undefined;
        resolve?: string | null | undefined;
        reject?: string | null | undefined;
        flow?: string | undefined;
        date_created?: string | undefined;
        user_created?: string | undefined;
    };
    key: string;
} | {
    action: "delete";
    key: string;
}>;
