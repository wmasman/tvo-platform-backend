"use strict";const{createRequire}=require("node:module");require=createRequire(__filename);const{readFileSync}=require("node:fs");let nativeBinding=null;const loadErrors=[],isMusl=()=>{let r=!1;return process.platform==="linux"&&(r=isMuslFromFilesystem(),r===null&&(r=isMuslFromReport()),r===null&&(r=isMuslFromChildProcess())),r},isFileMusl=r=>r.includes("libc.musl-")||r.includes("ld-musl-"),isMuslFromFilesystem=()=>{try{return readFileSync("/usr/bin/ldd","utf-8").includes("musl")}catch{return null}},isMuslFromReport=()=>{let r=null;return typeof process.report?.getReport=="function"&&(process.report.excludeNetwork=!0,r=process.report.getReport()),r?r.header&&r.header.glibcVersionRuntime?!1:!!(Array.isArray(r.sharedObjects)&&r.sharedObjects.some(isFileMusl)):null},isMuslFromChildProcess=()=>{try{return require("child_process").execSync("ldd --version",{encoding:"utf8"}).includes("musl")}catch{return!1}};function requireNative(){if(process.env.NAPI_RS_NATIVE_LIBRARY_PATH)try{nativeBinding=require(process.env.NAPI_RS_NATIVE_LIBRARY_PATH)}catch(r){loadErrors.push(r)}else if(process.platform==="android")if(process.arch==="arm64"){try{return require("./snappy.android-arm64.node")}catch(r){loadErrors.push(r)}try{return require("@napi-rs/snappy-android-arm64")}catch(r){loadErrors.push(r)}}else if(process.arch==="arm"){try{return require("./snappy.android-arm-eabi.node")}catch(r){loadErrors.push(r)}try{return require("@napi-rs/snappy-android-arm-eabi")}catch(r){loadErrors.push(r)}}else loadErrors.push(new Error(`Unsupported architecture on Android ${process.arch}`));else if(process.platform==="win32")if(process.arch==="x64"){try{return require("./snappy.win32-x64-msvc.node")}catch(r){loadErrors.push(r)}try{return require("@napi-rs/snappy-win32-x64-msvc")}catch(r){loadErrors.push(r)}}else if(process.arch==="ia32"){try{return require("./snappy.win32-ia32-msvc.node")}catch(r){loadErrors.push(r)}try{return require("@napi-rs/snappy-win32-ia32-msvc")}catch(r){loadErrors.push(r)}}else if(process.arch==="arm64"){try{return require("./snappy.win32-arm64-msvc.node")}catch(r){loadErrors.push(r)}try{return require("@napi-rs/snappy-win32-arm64-msvc")}catch(r){loadErrors.push(r)}}else loadErrors.push(new Error(`Unsupported architecture on Windows: ${process.arch}`));else if(process.platform==="darwin"){try{return require("./snappy.darwin-universal.node")}catch(r){loadErrors.push(r)}try{return require("@napi-rs/snappy-darwin-universal")}catch(r){loadErrors.push(r)}if(process.arch==="x64"){try{return require("./snappy.darwin-x64.node")}catch(r){loadErrors.push(r)}try{return require("@napi-rs/snappy-darwin-x64")}catch(r){loadErrors.push(r)}}else if(process.arch==="arm64"){try{return require("./snappy.darwin-arm64.node")}catch(r){loadErrors.push(r)}try{return require("@napi-rs/snappy-darwin-arm64")}catch(r){loadErrors.push(r)}}else loadErrors.push(new Error(`Unsupported architecture on macOS: ${process.arch}`))}else if(process.platform==="freebsd")if(process.arch==="x64"){try{return require("./snappy.freebsd-x64.node")}catch(r){loadErrors.push(r)}try{return require("@napi-rs/snappy-freebsd-x64")}catch(r){loadErrors.push(r)}}else if(process.arch==="arm64"){try{return require("./snappy.freebsd-arm64.node")}catch(r){loadErrors.push(r)}try{return require("@napi-rs/snappy-freebsd-arm64")}catch(r){loadErrors.push(r)}}else loadErrors.push(new Error(`Unsupported architecture on FreeBSD: ${process.arch}`));else if(process.platform==="linux")if(process.arch==="x64")if(isMusl()){try{return require("./snappy.linux-x64-musl.node")}catch(r){loadErrors.push(r)}try{return require("@napi-rs/snappy-linux-x64-musl")}catch(r){loadErrors.push(r)}}else{try{return require("./snappy.linux-x64-gnu.node")}catch(r){loadErrors.push(r)}try{return require("@napi-rs/snappy-linux-x64-gnu")}catch(r){loadErrors.push(r)}}else if(process.arch==="arm64")if(isMusl()){try{return require("./snappy.linux-arm64-musl.node")}catch(r){loadErrors.push(r)}try{return require("@napi-rs/snappy-linux-arm64-musl")}catch(r){loadErrors.push(r)}}else{try{return require("./snappy.linux-arm64-gnu.node")}catch(r){loadErrors.push(r)}try{return require("@napi-rs/snappy-linux-arm64-gnu")}catch(r){loadErrors.push(r)}}else if(process.arch==="arm")if(isMusl()){try{return require("./snappy.linux-arm-musleabihf.node")}catch(r){loadErrors.push(r)}try{return require("@napi-rs/snappy-linux-arm-musleabihf")}catch(r){loadErrors.push(r)}}else{try{return require("./snappy.linux-arm-gnueabihf.node")}catch(r){loadErrors.push(r)}try{return require("@napi-rs/snappy-linux-arm-gnueabihf")}catch(r){loadErrors.push(r)}}else if(process.arch==="riscv64")if(isMusl()){try{return require("./snappy.linux-riscv64-musl.node")}catch(r){loadErrors.push(r)}try{return require("@napi-rs/snappy-linux-riscv64-musl")}catch(r){loadErrors.push(r)}}else{try{return require("./snappy.linux-riscv64-gnu.node")}catch(r){loadErrors.push(r)}try{return require("@napi-rs/snappy-linux-riscv64-gnu")}catch(r){loadErrors.push(r)}}else if(process.arch==="ppc64"){try{return require("./snappy.linux-ppc64-gnu.node")}catch(r){loadErrors.push(r)}try{return require("@napi-rs/snappy-linux-ppc64-gnu")}catch(r){loadErrors.push(r)}}else if(process.arch==="s390x"){try{return require("./snappy.linux-s390x-gnu.node")}catch(r){loadErrors.push(r)}try{return require("@napi-rs/snappy-linux-s390x-gnu")}catch(r){loadErrors.push(r)}}else loadErrors.push(new Error(`Unsupported architecture on Linux: ${process.arch}`));else if(process.platform==="openharmony")if(process.arch==="arm64"){try{return require("./snappy.linux-arm64-ohos.node")}catch(r){loadErrors.push(r)}try{return require("@napi-rs/snappy-linux-arm64-ohos")}catch(r){loadErrors.push(r)}}else if(process.arch==="x64"){try{return require("./snappy.linux-x64-ohos.node")}catch(r){loadErrors.push(r)}try{return require("@napi-rs/snappy-linux-x64-ohos")}catch(r){loadErrors.push(r)}}else if(process.arch==="arm"){try{return require("./snappy.linux-arm-ohos.node")}catch(r){loadErrors.push(r)}try{return require("@napi-rs/snappy-linux-arm-ohos")}catch(r){loadErrors.push(r)}}else loadErrors.push(new Error(`Unsupported architecture on OpenHarmony: ${process.arch}`));else loadErrors.push(new Error(`Unsupported OS: ${process.platform}, architecture: ${process.arch}`))}if(nativeBinding=requireNative(),!nativeBinding||process.env.NAPI_RS_FORCE_WASI){try{nativeBinding=require("./snappy.wasi.cjs")}catch(r){process.env.NAPI_RS_FORCE_WASI&&loadErrors.push(r)}if(!nativeBinding)try{nativeBinding=require("@napi-rs/snappy-wasm32-wasi")}catch(r){process.env.NAPI_RS_FORCE_WASI&&loadErrors.push(r)}}if(!nativeBinding)throw loadErrors.length>0?new Error("Cannot find native binding. npm has a bug related to optional dependencies (https://github.com/npm/cli/issues/4828). Please try `npm i` again after removing both package-lock.json and node_modules directory.",{cause:loadErrors}):new Error("Failed to load native binding");module.exports=nativeBinding,module.exports.compress=nativeBinding.compress,module.exports.compressSync=nativeBinding.compressSync,module.exports.uncompress=nativeBinding.uncompress,module.exports.uncompressSync=nativeBinding.uncompressSync;
