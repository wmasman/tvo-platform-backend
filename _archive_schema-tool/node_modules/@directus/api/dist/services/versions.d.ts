import type { AbstractServiceOptions, ContentVersion, Item, MutationOptions, PrimaryKey, Query, QueryOptions } from '@directus/types';
import { ItemsService } from './items.js';
export declare class VersionsService extends ItemsService<ContentVersion> {
    constructor(options: AbstractServiceOptions);
    private validateCreateData;
    getMainItem(collection: string, item: PrimaryKey, query?: Query): Promise<Item>;
    verifyHash(collection: string, item: PrimaryKey, hash: string): Promise<{
        outdated: boolean;
        mainHash: string;
    }>;
    getVersionSave(key: string, collection: string, item: string, mapDelta?: boolean): Promise<ContentVersion | undefined>;
    createOne(data: Partial<Item>, opts?: MutationOptions): Promise<PrimaryKey>;
    readOne(key: PrimaryKey, query?: Query, opts?: QueryOptions): Promise<ContentVersion>;
    createMany(data: Partial<Item>[], opts?: MutationOptions): Promise<PrimaryKey[]>;
    updateMany(keys: PrimaryKey[], data: Partial<Item>, opts?: MutationOptions): Promise<PrimaryKey[]>;
    save(key: PrimaryKey, delta: Partial<Item>): Promise<Partial<Item>>;
    promote(version: PrimaryKey, mainHash: string, fields?: string[]): Promise<PrimaryKey>;
    private mapDelta;
}
