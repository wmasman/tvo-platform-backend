import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { type GetPromptResult } from '@modelcontextprotocol/sdk/types.js';
import type { Request, Response } from 'express';
import type { MCPOptions, ToolConfig, ToolResult } from './types.js';
export declare class DirectusMCP {
    promptsCollection?: string | null;
    systemPrompt?: string | null;
    systemPromptEnabled?: boolean;
    server: Server;
    allowDeletes?: boolean;
    constructor(options?: MCPOptions);
    /**
     * This handleRequest function is not awaiting lower level logic resulting in the actual
     * response being an asynchronous side effect happening after the function has returned
     */
    handleRequest(req: Request, res: Response): void;
    buildURL(tool: ToolConfig<unknown>, input: unknown, data: unknown): string | undefined;
    toPromptResponse(result: {
        description?: string | undefined;
        messages: GetPromptResult['messages'];
    }): GetPromptResult;
    toToolResponse(result?: ToolResult): {
        [x: string]: unknown;
        content: ({
            [x: string]: unknown;
            type: "text";
            text: string;
            _meta?: {
                [x: string]: unknown;
            } | undefined;
        } | {
            [x: string]: unknown;
            type: "image";
            data: string;
            mimeType: string;
            _meta?: {
                [x: string]: unknown;
            } | undefined;
        } | {
            [x: string]: unknown;
            type: "audio";
            data: string;
            mimeType: string;
            _meta?: {
                [x: string]: unknown;
            } | undefined;
        } | {
            [x: string]: unknown;
            type: "resource_link";
            name: string;
            uri: string;
            title?: string | undefined;
            description?: string | undefined;
            mimeType?: string | undefined;
            _meta?: {
                [x: string]: unknown;
            } | undefined;
        } | {
            [x: string]: unknown;
            type: "resource";
            resource: {
                [x: string]: unknown;
                text: string;
                uri: string;
                mimeType?: string | undefined;
                _meta?: {
                    [x: string]: unknown;
                } | undefined;
            } | {
                [x: string]: unknown;
                blob: string;
                uri: string;
                mimeType?: string | undefined;
                _meta?: {
                    [x: string]: unknown;
                } | undefined;
            };
            _meta?: {
                [x: string]: unknown;
            } | undefined;
        })[];
        _meta?: {
            [x: string]: unknown;
        } | undefined;
        structuredContent?: {
            [x: string]: unknown;
        } | undefined;
        isError?: boolean | undefined;
    };
    toExecutionError(err: unknown): {
        isError: boolean;
        content: {
            type: "text";
            text: string;
        }[];
    };
}
